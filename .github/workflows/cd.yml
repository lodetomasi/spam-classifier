name: CD - Continuous Delivery

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get version
      id: get_version
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          echo "VERSION=${{ inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi

    - name: Generate changelog
      id: changelog
      run: |
        echo "## Changes in ${{ steps.get_version.outputs.VERSION }}" > CHANGELOG.md
        echo "" >> CHANGELOG.md
        git log --pretty=format:"- %s (%h)" $(git describe --tags --abbrev=0 HEAD^)..HEAD >> CHANGELOG.md || echo "- Initial release" >> CHANGELOG.md
        cat CHANGELOG.md

    - name: Create release archive
      run: |
        mkdir -p release

        # Copy essential files
        cp -r .claude release/
        cp -r src release/
        cp -r data release/
        cp -r examples release/
        cp README.md SPECIFICATION_DESIGN.md RESULTS_COMPARISON.md requirements.txt release/

        # Create archive
        tar -czf spam-classifier-${{ steps.get_version.outputs.VERSION }}.tar.gz -C release .
        zip -r spam-classifier-${{ steps.get_version.outputs.VERSION }}.zip release/

        echo "✅ Release archives created"

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.get_version.outputs.VERSION }}
        name: Release ${{ steps.get_version.outputs.VERSION }}
        body_path: CHANGELOG.md
        files: |
          spam-classifier-${{ steps.get_version.outputs.VERSION }}.tar.gz
          spam-classifier-${{ steps.get_version.outputs.VERSION }}.zip
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Summary
      run: |
        echo "## Release ${{ steps.get_version.outputs.VERSION }} Created" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "✅ Archives created" >> $GITHUB_STEP_SUMMARY
        echo "✅ GitHub release published" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Download: https://github.com/${{ github.repository }}/releases/tag/${{ steps.get_version.outputs.VERSION }}" >> $GITHUB_STEP_SUMMARY

  publish-docs:
    name: Publish Documentation
    runs-on: ubuntu-latest
    needs: create-release
    if: success()

    steps:
    - uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install docs dependencies
      run: |
        pip install mkdocs mkdocs-material pymdown-extensions

    - name: Build documentation site
      run: |
        # Create mkdocs.yml if doesn't exist
        if [ ! -f mkdocs.yml ]; then
          cat > mkdocs.yml << 'EOF'
        site_name: Multi-Agent Spam Classifier
        site_description: Pure LLM-based spam classification using Claude agents
        site_url: https://github.com/lodetomasi/spam-classifier

        theme:
          name: material
          palette:
            primary: indigo
            accent: indigo

        nav:
          - Home: README.md
          - Specification: SPECIFICATION_DESIGN.md
          - Results: RESULTS_COMPARISON.md

        markdown_extensions:
          - pymdownx.highlight
          - pymdownx.superfences
          - pymdownx.tabbed
          - admonition
        EOF
        fi

        mkdocs build || echo "⚠️  Docs build skipped (mkdocs optional)"

    - name: Summary
      run: |
        echo "## Documentation Published" >> $GITHUB_STEP_SUMMARY
        echo "✅ Documentation site built" >> $GITHUB_STEP_SUMMARY

  docker-build:
    name: Build Docker Image (Optional)
    runs-on: ubuntu-latest
    needs: create-release
    if: false  # Disabled by default, enable if needed

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ghcr.io/${{ github.repository }}:latest
          ghcr.io/${{ github.repository }}:${{ github.ref_name }}

  deployment-summary:
    name: Deployment Summary
    runs-on: ubuntu-latest
    needs: [create-release, publish-docs]
    if: always()

    steps:
    - name: Summary
      run: |
        echo "## 🚀 Deployment Complete" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Artifacts" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Release archives (.tar.gz, .zip)" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ GitHub release created" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Documentation published" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "1. Verify release at: https://github.com/${{ github.repository }}/releases" >> $GITHUB_STEP_SUMMARY
        echo "2. Update CHANGELOG.md if needed" >> $GITHUB_STEP_SUMMARY
        echo "3. Announce release to users" >> $GITHUB_STEP_SUMMARY
