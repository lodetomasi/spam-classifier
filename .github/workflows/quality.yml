name: Code Quality & Coverage

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 0 * * 0'  # Weekly on Sunday

jobs:
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pylint radon flake8 mccabe
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Analyze code complexity
      run: |
        echo "## Code Complexity Report" > complexity-report.txt
        echo "" >> complexity-report.txt
        radon cc src/ -s -a >> complexity-report.txt || true
        radon mi src/ -s >> complexity-report.txt || true
        cat complexity-report.txt

    - name: Run pylint
      run: |
        pylint src/ --exit-zero --output-format=json > pylint-report.json || true
        pylint src/ --exit-zero --output-format=text || true

    - name: Check cyclomatic complexity
      run: |
        python -m mccabe --min 5 src/*.py || echo "‚ö†Ô∏è  Complexity warnings found"

    - name: Upload reports
      uses: actions/upload-artifact@v4
      with:
        name: quality-reports
        path: |
          complexity-report.txt
          pylint-report.json

  agent-validation:
    name: Validate Agent Configurations
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Validate agent markdown syntax
      run: |
        echo "Validating agent configurations..."
        for file in .claude/agents/*.md; do
          echo "Checking $file..."
          grep -q "^---$" "$file" || (echo "‚ùå Missing frontmatter in $file" && exit 1)
          grep -q "name:" "$file" || (echo "‚ùå Missing name in $file" && exit 1)
          grep -q "description:" "$file" || (echo "‚ùå Missing description in $file" && exit 1)
          echo "‚úÖ $file validated"
        done

    - name: Check agent prompt quality
      run: |
        for file in .claude/agents/*.md; do
          lines=$(wc -l < "$file")
          if [ $lines -lt 20 ]; then
            echo "‚ö†Ô∏è  $file is very short ($lines lines)"
          fi
        done
        echo "‚úÖ Agent prompts checked"

  pattern-catalog-validation:
    name: Validate Pattern Catalog
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Validate pattern catalog structure
      run: |
        python << 'EOF'
        import json
        import sys

        print("Validating pattern catalog...")

        with open('data/pattern_catalog.json', 'r') as f:
            catalog = json.load(f)

        # Check required keys
        required_keys = ['spam_patterns', 'ham_patterns', 'few_shot_examples']
        for key in required_keys:
            if key not in catalog:
                print(f"‚ùå Missing required key: {key}")
                sys.exit(1)

        # Validate spam patterns
        if 'intent_patterns' in catalog['spam_patterns']:
            spam_count = len(catalog['spam_patterns']['intent_patterns'])
            print(f"‚úÖ Found {spam_count} spam intent patterns")

        # Validate ham patterns
        if 'legitimate_characteristics' in catalog['ham_patterns']:
            ham_count = len(catalog['ham_patterns']['legitimate_characteristics'])
            print(f"‚úÖ Found {ham_count} legitimate characteristics")

        # Validate few-shot examples
        if 'spam' in catalog['few_shot_examples']:
            spam_examples = len(catalog['few_shot_examples']['spam'])
            print(f"‚úÖ Found {spam_examples} spam examples")

        if 'ham' in catalog['few_shot_examples']:
            ham_examples = len(catalog['few_shot_examples']['ham'])
            print(f"‚úÖ Found {ham_examples} ham examples")

        print("\n‚úÖ Pattern catalog structure valid")
        EOF

  documentation-quality:
    name: Documentation Quality Check
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Check README completeness
      run: |
        echo "Checking README.md..."

        # Required sections
        grep -q "## Overview" README.md || (echo "‚ùå Missing Overview" && exit 1)
        grep -q "## Architecture" README.md || (echo "‚ùå Missing Architecture" && exit 1)
        grep -q "## Installation" README.md || (echo "‚ùå Missing Installation" && exit 1)
        grep -q "## Usage" README.md || (echo "‚ùå Missing Usage" && exit 1)
        grep -q "## Performance" README.md || (echo "‚ùå Missing Performance" && exit 1)

        # Check for broken links
        grep -oP '\[.*?\]\(.*?\)' README.md | while read link; do
          file=$(echo $link | sed -n 's/.*(\(.*\))/\1/p' | cut -d'#' -f1)
          if [[ $file == http* ]]; then
            continue  # Skip external links
          fi
          if [[ ! -z $file && ! -f $file ]]; then
            echo "‚ö†Ô∏è  Potential broken link: $file"
          fi
        done

        echo "‚úÖ README.md validated"

    - name: Check specification completeness
      run: |
        echo "Checking SPECIFICATION_DESIGN.md..."
        test -s SPECIFICATION_DESIGN.md || (echo "‚ùå Specification empty" && exit 1)

        grep -q "Agent" SPECIFICATION_DESIGN.md || (echo "‚ö†Ô∏è  No agent descriptions found")
        grep -q "Architecture" SPECIFICATION_DESIGN.md || (echo "‚ö†Ô∏è  No architecture section")

        echo "‚úÖ Specification validated"

  quality-summary:
    name: Quality Summary
    runs-on: ubuntu-latest
    needs: [code-quality, agent-validation, pattern-catalog-validation, documentation-quality]
    if: always()

    steps:
    - name: Generate summary
      run: |
        echo "## üìä Code Quality Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Checks Completed" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ Code complexity analysis" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ Agent configuration validation" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ Pattern catalog validation" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ Documentation quality check" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Status**: Quality checks passed" >> $GITHUB_STEP_SUMMARY
